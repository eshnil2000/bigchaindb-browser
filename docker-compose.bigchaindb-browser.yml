#docker network create -d overlay --attachable traefik_default
# save sensitive variables in .env file
#validate config using : docker-compose -f docker-compose.traefik-labs.yml config
# env $(cat .env | grep ^[A-Z] | xargs) docker stack deploy -c docker-compose.bigchaindb-browser.yml bigchainbrowser
#https://thenewstack.io/tutorial-create-a-docker-swarm-with-persistent-storage-using-glusterfs/

version: '3.2'
networks:
    traefik_default:
      driver: overlay
      external:
        name:  traefik_default
    backend:

services:
    
    bigchainbrowser:
        image: httpd
        volumes:
            - ./:/usr/local/apache2/htdocs/
        networks:
            - traefik_default
        
        deploy:
            labels:
                # The labels are usefull for Traefik only
                - "traefik.enable=true"
                - "traefik.docker.network=traefik_default"
                # Get the routes from http
                - "traefik.http.routers.bigchainbrowser.rule=Host(`bigchainbrowser.${DOMAIN_NAME}`)"
                - "traefik.http.routers.bigchainbrowser.entrypoints=web"
                # Redirect these routes to https
                - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
                - "traefik.http.routers.bigchainbrowser.middlewares=redirect-to-https@docker"
                # Get the routes from https
                - "traefik.http.routers.bigchainbrowser-secure.rule=Host(`bigchainbrowser.${DOMAIN_NAME}`)"
                - "traefik.http.routers.bigchainbrowser-secure.entrypoints=websecure"
                # Apply autentificiation with http challenge
                - "traefik.http.routers.bigchainbrowser-secure.tls=true"
                #- "traefik.http.routers.ganachecli-secured.tls.certresolver=myhttpchallenge"
                - "traefik.http.services.bigchainbrowser.loadbalancer.server.port=80"
                - "traefik.http.routers.bigchainbrowser-secure.service=bigchainbrowser"
                #- "traefik.http.services.ganachecli.loadbalancer.swarm=true"
                #- "traefik.http.routers.bigchainbrowser.middlewares=test-auth3"
                #- "traefik.http.routers.bigchainbrowser-secure.middlewares=test-auth3"
                #- "traefik.http.middlewares.test-auth3.basicauth.users=${USER_HASH}"
    
    